% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/safecall.R
\name{safecall}
\alias{safecall}
\title{Call a native function with correct resource cleanup}
\usage{
safecall(cfun, ...)
}
\arguments{
\item{cfun}{A \link[base:RegisteredNativeSymbol]{base::RegisteredNativeSymbol} object.}

\item{...}{Arguments to pass to \code{cfun}.}
}
\description{
This function is similar to \code{\link[base:.Call]{base::.Call()}}, but allows proper
resource cleanup, via exit handlers.
}
\details{
To call a native function, you must use native routine registration
in your package. See \link{getDLLRegisteredRoutines}. Then you need to
do the following simple steps:
\enumerate{
\item Use \code{safecall()} instead of \code{\link[base:.Call]{base::.Call()}}, with a \code{CallRoutine}
object a a first argument.
\item Specify the safecall package in both the \code{LinkingTo} and \code{Imports}
field of the \code{DESCRIPTION} of your package.
\item In your C file include the \code{safecall.h} header. (The include path
will be set up by R automatically if you used \code{LinkingTo} above.)
\item "Call" the \code{DEFINE_ON_EXIT} macro in your code file. This will define
the \code{on_exit()} C function that you can call from your code to add
exit handlers.
\item Call \code{on_exit()} to create exit handlers. It has two arguments, the
first one the exit handler function, that takes a \code{void*} pointer.
The second one is the exit data, \code{void*}, which will be passed to
the exit handler handler funcion on cleanup.
}

Note that the exit handlers are always called, i.e. both is case of
normal and non-normal termination. They are always called in reverse
order.
}
\section{Examples}{
\preformatted{savecall(c_fun1, arg1, arg2)
}
}

\seealso{
the README file of the package
}
